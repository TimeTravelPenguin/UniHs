name: CI

on:
  push:
    branches: [ "main" ]
    paths: [ "src/**", "test/**", "app/**", "package.yaml", "stack.yaml", "stack.yaml.lock", "UniHs.cabal", "Setup.hs" ]
#  pull_request:
#    branches: [ "main" ]

  workflow_dispatch:
    # inputs:

env:
  env_var: ${{ vars.ENV_CONTEXT_VAR }}

concurrency: ci-${{ github.ref }}
jobs:
  build:
    name: GHC ${{ matrix.ghc-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        ghc-version: ['${{ vars.GHC_VERSION }}']

    steps:
      - uses: actions/checkout@v3

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: 'latest'
          cabal-update: true

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build --dry-run

      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      - name: Save cached dependencies
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}
  
      - name: Build
        run: cabal build all

      - name: Run tests
        run: cabal test all

      - name: Check cabal file
        run: cabal check

  deploy-haddock:
    name: Deploy Haddock Documentation
    runs-on: 'ubuntu-latest'

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up GHC ${{ vars.GHC_VERSION }}
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ vars.GHC_VERSION }}
          cabal-version: 'latest'
          cabal-update: true

      - name: Configure the build
        run: |
          cabal configure --enable-documentation
          cabal build --dry-run

      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}-haddock
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-
      
      - name: Build documentation
        run: |
          cabal haddock all --builddir=docs_build
          echo "docs=$(find docs_build -path "*/doc/html/UniHs")" >> "$GITHUB_ENV"

      - name: Save cached dependencies
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Deploy documentation
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          clean: true
          branch: gh-pages
          folder: ${{ env.docs }}
        