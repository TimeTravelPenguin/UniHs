-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/TimeTravelPenguin/UniHs#readme</a>
@package UniHs
@version 0.1.0.0

module Data.Configuration
type ReplacementActionName = Text
type ReplacementSearchString = Text
type TemplateName = Text

-- | A text replacement action to perform on the contents of a file, as
--   read from a configuration file.
data TextReplacementAction
TextReplacementAction :: ReplacementActionName -> ReplacementSearchString -> Text -> TextReplacementAction

-- | The unique name for the replacement action
[_replacementActionName] :: TextReplacementAction -> ReplacementActionName

-- | The String to find and replace with a file
[_replacementActionSearchString] :: TextReplacementAction -> ReplacementSearchString

-- | The value to substitute in place of the found search string. There are
--   some special values that can be used based on the current directory:
--   
--   TODO: table
--   
--   Any other values will be substituted as is.
[_replacementText] :: TextReplacementAction -> Text
replacementActionName :: Lens' TextReplacementAction ReplacementActionName
replacementActionSearchString :: Lens' TextReplacementAction ReplacementSearchString
replacementText :: Lens' TextReplacementAction Text

-- | Information about authors for <a>TemplateConfiguration</a>s.
data AuthorInfo

-- | A single author
SingularAuthor :: Text -> AuthorInfo

-- | A non-empty collection of authors
MultipleAuthors :: NonEmpty Text -> AuthorInfo

-- | A template to specify a directory of files to copy to a new location.
data TemplateConfiguration
TemplateConfiguration :: Maybe AuthorInfo -> Path Abs Dir -> Path Rel Dir -> Map (Path Rel File) (Seq Text) -> TemplateConfiguration

-- | The author of the current template
[_authorInfo] :: TemplateConfiguration -> Maybe AuthorInfo

-- | The absolute path to the directory of files consisting of the template
[_templateDirectoryPath] :: TemplateConfiguration -> Path Abs Dir

-- | The path relative to the assessment root (or current directory when
--   using --here) where the contents of the template folder will be copied
--   into. An empty path will copy directly into the root directory,
--   without a new folder.
[_relativeOutputPath] :: TemplateConfiguration -> Path Rel Dir

-- | A mapping of files relative to the template directory with
--   <a>TextReplacementAction</a>s to perform. Keys are the relative file
--   paths and values are `Seq Text` of names to
--   <tt>TextReplacementActions</tt>.
[_fileContentReplacementMap] :: TemplateConfiguration -> Map (Path Rel File) (Seq Text)
authorInfo :: Lens' TemplateConfiguration (Maybe AuthorInfo)
templateDirectoryPath :: Lens' TemplateConfiguration (Path Abs Dir)
relativeOutputPath :: Lens' TemplateConfiguration (Path Rel Dir)
fileContentReplacementMap :: Lens' TemplateConfiguration (Map (Path Rel File) (Seq Text))

-- | A template configuration used to copy a directory when creating a new
--   assessment.
data Configuration
Configuration :: Seq TextReplacementAction -> Map TemplateName TemplateConfiguration -> Configuration

-- | A collection of replacement actions to perform on specified file
--   contents
[_contentReplacementActions] :: Configuration -> Seq TextReplacementAction

-- | A mapping of template configuration names to configurations
[_templateConfigurations] :: Configuration -> Map TemplateName TemplateConfiguration
contentReplacementActions :: Lens' Configuration (Seq TextReplacementAction)
templateConfigurations :: Lens' Configuration (Map TemplateName TemplateConfiguration)
data ConfigurationPath
NewConfiguration :: Path Abs File -> ConfigurationPath
ExistingConfiguration :: Path Abs File -> ConfigurationPath
instance Data.Aeson.Types.ToJSON.ToJSON Data.Configuration.TextReplacementAction
instance Data.Aeson.Types.FromJSON.FromJSON Data.Configuration.TextReplacementAction
instance GHC.Generics.Generic Data.Configuration.TextReplacementAction
instance GHC.Classes.Eq Data.Configuration.TextReplacementAction
instance GHC.Show.Show Data.Configuration.TextReplacementAction
instance Data.Aeson.Types.ToJSON.ToJSON Data.Configuration.AuthorInfo
instance Data.Aeson.Types.FromJSON.FromJSON Data.Configuration.AuthorInfo
instance GHC.Generics.Generic Data.Configuration.AuthorInfo
instance GHC.Classes.Eq Data.Configuration.AuthorInfo
instance GHC.Show.Show Data.Configuration.AuthorInfo
instance Data.Aeson.Types.ToJSON.ToJSON Data.Configuration.TemplateConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Data.Configuration.TemplateConfiguration
instance GHC.Generics.Generic Data.Configuration.TemplateConfiguration
instance GHC.Classes.Eq Data.Configuration.TemplateConfiguration
instance GHC.Show.Show Data.Configuration.TemplateConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Data.Configuration.Configuration
instance Data.Aeson.Types.FromJSON.FromJSON Data.Configuration.Configuration
instance GHC.Generics.Generic Data.Configuration.Configuration
instance GHC.Classes.Eq Data.Configuration.Configuration
instance GHC.Show.Show Data.Configuration.Configuration
instance Data.Aeson.Types.ToJSON.ToJSON Data.Configuration.ConfigurationPath
instance Data.Aeson.Types.FromJSON.FromJSON Data.Configuration.ConfigurationPath
instance GHC.Generics.Generic Data.Configuration.ConfigurationPath
instance GHC.Classes.Eq Data.Configuration.ConfigurationPath
instance GHC.Show.Show Data.Configuration.ConfigurationPath

module Data.CourseDirectory.Parsing
type Parser = Parsec Void String
pYear :: Parser String
isYear :: String -> Bool
pCourseCode :: Parser (String, String)
parseCourseCode :: String -> Either (ParseErrorBundle String Void) (String, String)
isCourseCode :: String -> Bool
pAssessmentItemFolderNumber :: Parser Integer
parseAssessmentItemFolderNumber :: String -> Either (ParseErrorBundle String Void) Integer
isAssessmentItemFolder :: String -> Bool

module Data.Maybe.Helpers
catMaybesOrDefault :: [a] -> [Maybe a] -> [a]

module Data.Sequence.Helpers
rights :: Seq (Either a b) -> Seq b
nextMissingNonNegative :: IntSet -> Int

module IOHelpers
getApplicationDirectory :: IO (Path Abs Dir)
encodeFilePretty :: ToJSON a => FilePath -> a -> IO ()

module Data.Configuration.Parsing
ifNewConfiguration :: ConfigurationPath -> (Path Abs File -> t) -> (Path Abs File -> t) -> t
createDemoTemplateFileIfNotExist :: Path Abs File -> IO ()
createDefaultConfigFile :: Path Abs Dir -> IO (Path Abs File)

-- | Creates a default "config.json" in the provided directory, if one is
--   not found.
findOrCreateDefaultConfig :: Path Abs Dir -> FilePath -> IO ConfigurationPath
parseApplicationConfig :: Path Abs File -> IO (Either String Configuration)


-- | Module contains functionality for parsing command line arguments
module Options

-- | Data type containing data for parsed command line arguments.
newtype AppArgs
AppArgs :: ProgramCommand -> AppArgs
[programCommand] :: AppArgs -> ProgramCommand

-- | Datatype for which command the program will execute.
data ProgramCommand

-- | Create a new assessment directory
CreateAssessment :: AssessmentCopyToLocation -> ProgramCommand

-- | Start the CLI to add, edit, or use hypothetical grades for various
--   features
GradingCLI :: ProgramCommand

-- | Data type for <tt>--here</tt> flag. See
--   <a>parseFlagAssessmentCopyToLocation</a>.
data AssessmentCopyToLocation
NewCourseAssessment :: AssessmentCopyToLocation
Here :: AssessmentCopyToLocation

-- | Options used at runtime containing parsed AppArgs
data ProgramOptions
ProgramOptions :: AppArgs -> Path Abs Dir -> ProgramOptions
[appArgs] :: ProgramOptions -> AppArgs
[currentWorkingDir] :: ProgramOptions -> Path Abs Dir

-- | Application argument parser used to parse <a>AppArgs</a>.
argParser :: Parser AppArgs

-- | Parses a <a>ProgramCommand</a>.
parseProgramCommand :: Parser ProgramCommand

-- | Parses <tt>grades</tt> command for <a>GradingCLI</a>.
parseCommandGradingCLI :: Mod CommandFields ProgramCommand

-- | Parses <tt>--here</tt> flag for <a>AssessmentCopyToLocation</a>. Using
--   the flag results in <a>Here</a>. Otherwise,
--   <a>NewCourseAssessment</a>.
parseFlagAssessmentCopyToLocation :: Parser AssessmentCopyToLocation

-- | Parses <tt>assess</tt> command for <a>CreateAssessment</a>.
parseCommandNewAssessment :: Mod CommandFields ProgramCommand

-- | Used to create a <a>ProgramOptions</a> by parsing <a>AppArgs</a> from
--   the commandline.
getProgramOptions :: IO ProgramOptions
instance GHC.Show.Show Options.AssessmentCopyToLocation
instance GHC.Show.Show Options.ProgramCommand
instance GHC.Show.Show Options.AppArgs
instance GHC.Show.Show Options.ProgramOptions

module Printing
type Message = String
type URI = String
data SGRStack a

-- | Start a new SGR scope with the provided initial SGR paramaters.
startSGRScope :: [SGR] -> SGRStack a -> IO a

-- | Start an inner SGR scope, appending the provided options to the stack.
--   These options are set in order, after previously provided options.
nestedSGRScope :: [SGR] -> SGRStack a -> SGRStack a
sgrHyperlink :: URI -> Message -> SGRStack ()
sgrGray :: [SGR]
sgrYellow :: [SGR]
sgrBlue :: [SGR]
sgrPutStr :: Message -> SGRStack ()
sgrPutStrLn :: Message -> SGRStack ()
instance GHC.Base.Monad Printing.SGRStack
instance GHC.Base.Applicative Printing.SGRStack
instance GHC.Base.Functor Printing.SGRStack
instance Control.Monad.IO.Class.MonadIO Printing.SGRStack
instance Control.Monad.State.Class.MonadState (Data.Sequence.Internal.Seq System.Console.ANSI.Types.SGR) Printing.SGRStack

module StringFormatters
surround :: String -> String -> String -> String
surround1 :: String -> String -> String
cleanAbsDirPathString :: Path Abs Dir -> FilePath
cleanRelDirPathString :: Path Rel Dir -> FilePath
cleanDirNameString :: Path b Dir -> FilePath
cleanAbsFilePathString :: Path Abs File -> FilePath

module Data.CourseDirectory
type SubjectCode = String
type SubjectIdentifier = Integer
data CourseCode
CourseCode :: SubjectCode -> SubjectIdentifier -> CourseCode
data CourseDirectory
CourseDirectory :: Path Abs Dir -> Maybe AssessmentsDirectory -> CourseDirectory
data AssessmentsDirectory
AssessmentsDirectory :: Path Abs Dir -> Seq AssessmentItem -> AssessmentsDirectory
data AssessmentItem
AssessmentItem :: Integer -> Path Abs Dir -> AssessmentItem
mkCourseCode :: String -> Maybe CourseCode
mkAssessmentItem :: Path Abs Dir -> Either (ParseErrorBundle String Void) AssessmentItem
assessmentItemNumber :: Lens' AssessmentItem Integer
assessmentItemDirectory :: Lens' AssessmentItem (Path Abs Dir)
assessmentsDirectoryPath :: Lens' AssessmentsDirectory (Path Abs Dir)
assessmentItems :: Lens' AssessmentsDirectory (Seq AssessmentItem)
courseDirectoryPath :: Lens' CourseDirectory (Path Abs Dir)
courseAssessmentsDirectoryRoot :: Lens' CourseDirectory (Maybe AssessmentsDirectory)
subjectCode :: Lens' CourseCode SubjectCode
numericIdentifier :: Lens' CourseCode SubjectIdentifier
instance GHC.Classes.Eq Data.CourseDirectory.CourseCode
instance GHC.Show.Show Data.CourseDirectory.AssessmentItem
instance GHC.Classes.Eq Data.CourseDirectory.AssessmentItem
instance GHC.Show.Show Data.CourseDirectory.AssessmentsDirectory
instance GHC.Classes.Eq Data.CourseDirectory.AssessmentsDirectory
instance GHC.Show.Show Data.CourseDirectory.CourseDirectory
instance GHC.Classes.Eq Data.CourseDirectory.CourseDirectory

module Actions.CourseDirectory
data CourseDirectoryError
CourseDirNotFound :: Path Abs Dir -> CourseDirectoryError
CourseAssessmentsDirNotFound :: Path Abs Dir -> CourseDirectoryError
FailedToCreateDirectory :: Path Abs Dir -> Path Rel Dir -> CourseDirectoryError
OtherException :: String -> CourseDirectoryError
getCourseDirectoryInPath :: MonadIO m => Path Abs Dir -> ExceptT CourseDirectoryError m CourseDirectory
ensureAssessmentsDirectory :: MonadIO m => CourseDirectory -> m CourseDirectory
createNewAssessmentInLocation :: MonadIO m => AssessmentCopyToLocation -> Path Abs Dir -> m (Either CourseDirectoryError (Path Abs Dir))
instance GHC.Show.Show Actions.CourseDirectory.CourseDirectoryError

module Commands

-- | TODO: Need to implement configuration logics
runProgram :: Configuration -> IO ()
